service: sls-project # service name

# we also have plugin for typescript
plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: '20201221'
  memorySize: 256
  stage: ${opt:stage, 'dev'} # if option stage is not defined, it is dev
  region: eu-west-1 # as our region we configured in aws cli
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url} # do it when mailing srv is configured
  iam:
    role:
      statements:
        - ${file(iam/AuctionsTableIAM.yaml):AuctionsTableIAM}
        - ${file(iam/mailQueueIAM.yaml):MailQueueIAM}

# resources we wanna use in the app
resources:
  Resources: # This is a special cloud formation language, created by aws, to use aws resources
    AuctionsTable: ${file(resources/AuctionsTableResources.yml):AuctionsTable}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer} # commented for testing
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer} # commented for testing
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.authorizer} # commented for testing
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.authorizer} # commented for testing
  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events: # we are using AWS EventBridge for this service
    #   - schedule: rate(1 minute) # will run this for every minute
    # we will uncomment the upper lines on production mode -- till, we will invoke processAuctions manually

custom:
  authorizer:
    arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:Auth-Service-${self:provider.stage}-auth
    # keep in mind -- auth and auction service should be created by same aws account -- otherwise we would have to deal with some other way
    # go to cloudFormation -> stacks -> auth-service -> resources -> search for lambda -> select AuthLambdaFunction -> then, copy arn and paste here in authorizer
  AuctionsTable:
    name: !Ref AuctionsTable # Ref returns table name , AuctionsTable is the resource name here
    arn: !GetAtt AuctionsTable.Arn # GetAtt will return actual arn of the resource
  MailQueue: # # do it when mailing srv is configured
    arn: ${cf:Notification-Service-${self:provider.stage}.MailQueueArn}
    url: ${cf:Notification-Service-${self:provider.stage}.MailQueueUrl}
  bundle:
    linting: false
